%class "LangParser";
%package "lang.ast";

%embed {:
	static public class SyntaxError extends RuntimeException { public SyntaxError(String msg) {super(msg);}}
	// Disable syntax error recovery
	protected void recoverFromError(Symbol token, TokenStream in) {
		throw new SyntaxError("Cannot recover from the syntax error");
	}
:};


//Language ::= Definition*;
//
//Definition ::= <Name> Form*;
//
//Form ::= Term*;
//
//
//abstract Term ::= <Name>;
//Literal      : Term ::= <Value>;
//MetaVariable : Term ::= <DefinitionName>;


//%terminals COLON, SEP, LBRACKET, RBRACKET, LPAREN, RPAREN, ID, COMMA;
%terminals DEFAS, PIPE, LESSTHAN, MORETHAN, ID;

%typeof language = "Language";
%typeof definition_list = "List<Definition>";
%typeof definition = "Definition";
%typeof expression_list = "List<List<Term>>>";
%typeof term = "Term";
%typeof term_list = "List<Term>";
%typeof id = "String";

%goal language;

language = definition_list.a {: return new Language(a); :};

definition_list =
	  definition.a {: return new List().add(a); :}
	| definition_list.a definition.b {: return a.add(b); :}
	;

definition =
    id.id DEFAS expression_list {: return new Definition(id, expression_list); :}

expression_list =
	  term_list.a {: return new List().add(a); :}
	| expression_list.a PIPE term_list.b {: return a.add(b); :}
	;

term =
    LESSTHAN id.id MORETHAN {: return new MetaVariable(id); :}
  | literal.literal         {: return new Literal(literal); :}
  ;

term_list =
	  term.a {: return new List().add(a); :}
	| term_list.a term.b {: return a.add(b); :}
	;

id = ID;

