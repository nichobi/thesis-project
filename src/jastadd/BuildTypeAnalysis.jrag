import java.io.ByteArrayOutputStream;
import java.io.PrintStream;
import java.lang.reflect.InvocationTargetException;
import org.jastadd.JastAdd;
import org.jastadd.ast.AST.Ast;
import org.jastadd.Configuration;
import java.util.Map;
import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedList;

aspect TypeAnalysisUtil {
  syn String Formula.id();
  eq HasType.id() = getExpr().id();
  syn String Term.id();
  eq Function.id() = getID();
  eq Value.id() = getID();

}

aspect BuildTypeAnalysis {

  syn String RuleSet.generateTypeChecker(){
    Map<String, java.util.List<Rule>> ruleMap = new HashMap();

    for (Rule r : getRules()) {
      String target = r.target().codeString();
      ruleMap.putIfAbsent(target, new LinkedList());
      ruleMap.get(target).add(r);
    }

    StringBuilder typeCheckDef = new StringBuilder();
    typeCheckDef.append("aspect TypingRules {\n\n");
    for (String k : ruleMap.keySet()) {
      typeCheckDef.append("syn Type " + k + ".type() {\n");
      for (Rule r: ruleMap.get(k)) {
        typeCheckDef.append(r.generateRuleChecker());
      }
      typeCheckDef.append("}\n");
    }

    typeCheckDef.append("}");

    return typeCheckDef.toString();
  }

  syn String Rule.generateRuleChecker(){
    StringBuilder ruleDef = new StringBuilder();
    switch(getNumPremises()) {
      case 0:
        ruleDef.append(
          getConclusion().generateConclusion()
        );
        break;
      default:
        ruleDef.append(getConclusion().generateDeclarations());
        ruleDef.append(generateTypeVariableCheck());
        ruleDef.append("if(");
        java.util.List<String> premiseStrings = new LinkedList<String>();
        for (Formula p : getPremisesList()) {
          premiseStrings.add(p.generatePremise());
        }
        ruleDef.append(String.join(" && ", premiseStrings));
        ruleDef.append(") {\n");
        ruleDef.append(
          getConclusion().generateConclusion()
        );
        ruleDef.append("\n");
        ruleDef.append("}\n");
        ruleDef.append("throw new RuntimeException(\"Typechecking failed\");\n");
    }
    return ruleDef.toString();
  }

  syn String Term.codeString();
  eq Value.codeString() {
    return getID();
  }
  eq Function.codeString() {
    return getID();
  }

  syn Term ASTNode.target() = null;
  eq Rule.target() {
    return getConclusion().target();
  }
  eq HasType.target() {
    return getExpr();
  }

  syn String TyTerm.codeString();
  eq TyVal.codeString() {
    return "new " + getID() + "()";
  }
  eq TyVar.codeString() = "tyvar_" + getID();

  syn String TyTerm.generateTypeVariableCheck();
  eq TyVal.generateTypeVariableCheck() = "\n";
  inh String TyTerm.correspondsTo();
  eq HasType.getTy().correspondsTo() = getExpr().codeString();
  eq TyVar.generateTypeVariableCheck() =
      "if(" + codeString() + " == null) " + codeString() + " = " + correspondsTo() + ".type();\n"
    + "else if (!" + codeString() + ".matches(" + correspondsTo() + ".type()))\n"
    + "throw new RuntimeException(\"Typechecking failed: Type variable mismatch\");\n";

  syn String Formula.generateTypeVariableCheck();
  eq HasType.generateTypeVariableCheck() {
    return getTy().generateTypeVariableCheck();
  }
  syn String Rule.generateTypeVariableCheck() {
    StringBuilder sb = new StringBuilder();
    for (Formula p : getPremisesList()) {
      sb.append(p.generateTypeVariableCheck());
    }
    return sb.toString();
  }

  syn String Formula.generateConclusion();
  eq HasType.generateConclusion() {
    return "return " + getTy().codeString() + ";";
  }
  syn String Formula.generatePremise();
  eq HasType.generatePremise() {
    return getExpr().codeString() + ".type().matches(" + getTy().codeString() + ")";
  }

  syn String TyTerm.generateDeclarations();
  eq TyVal.generateDeclarations() = "\n";
  eq TyVar.generateDeclarations() = "Type " + codeString() + " = null;\n";

  syn String Formula.generateDeclarations();
  eq HasType.generateDeclarations() =
    getExpr().generateDeclarations()
      + "\n"
      + getTy().generateDeclarations();

  syn String Term.generateDeclarations();

  eq Value.generateDeclarations() = "\n";

  eq Function.generateDeclarations() {
    StringBuilder sb = new StringBuilder();
    for(int i = 0; i < getNumTerm(); i++) {
      if(getTerm(i) instanceof Value) {
        sb.append("ASTNode " + getTerm(i).id() + " = getChild(" + i + ");\n");
      }
    }
    return sb.toString();
  }

  syn String Rule.generateCode() {
    StringBuilder sb = new StringBuilder();
    sb.append(String.join("\n",
      "syn Type " + getConclusion().id() + ".type() {"
      )
    );
    return sb.toString();
  }

}
